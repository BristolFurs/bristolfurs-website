@use "../settings/colors";

@use "media-queries";

@use "sass:map";

// Internal function to get a raw colour value from the semantic map
@function _get-raw-color($key, $mode: "light") {
  @if not map.has-key(colors.$bf-color-palette-semantic, $key) {
    @error "Color `#{$key}` does not exist.";
  }
  $color: map.get(colors.$bf-color-palette-semantic, $key);
  @if not map.has-key($color, $mode) {
    @error "Color `#{$key}` does not have a #{mode} mode version defined.";
  }
  @return map.get($color, $mode);
}

// Generate color-based CSS custom properties
@mixin generate-color-custom-properties {
  :root {
    @each $key, $map in colors.$bf-color-palette-semantic {
      --color-#{$key}: #{_get-raw-color($key, $mode: "light")};
    }
  }
  @if colors.$bf-use-dark-mode {
    @include media-queries.dark-mode {
      :root {
        @each $key, $map in colors.$bf-color-palette-semantic {
          --color-#{$key}: #{_get-raw-color($key, $mode: "dark")};
        }
      }
    }
  }
}

// Get the colour as a CSS custom property
@function get-color($key) {
  @return var(--color-#{$key}, #{_get-raw-color($key)});
}
